{"ast":null,"code":"var _jsxFileName = \"/Users/micahpeterson/Desktop/P365ReactAdministration/src/components/DraggableList.js\";\nimport React, { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport './DraggableList.css';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DraggableList = props => {\n  let array = [{\n    id: 'list-1',\n    title: 'Automatic',\n    thumb: '/path/to/icon'\n  }, {\n    id: 'list-2',\n    title: 'Automatic',\n    thumb: '/path/to/icon'\n  }, {\n    id: 'list-3',\n    title: 'Automatic',\n    thumb: '/path/to/icon'\n  }, {\n    id: 'list-4',\n    title: 'Automatic',\n    thumb: '/path/to/icon'\n  }];\n  const TaskList = styled.div`\n    padding: 8px;\n`;\n  const Item = styled.div`\n    padding: 8px;\n    border: 1px solid gray;\n    margin:  2px;\n    background-color:white;\n`;\n\n  let onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const items = Array.from(list);\n    const [reorderedItem] = items.splice(source.index, 1);\n    items.splice(destination.index, 0, reorderedItem);\n    updateList(items);\n  };\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(Droppable, {\n      droppableId: \"drop-id-1\",\n      children: provided => /*#__PURE__*/_jsxDEV(TaskList, {\n        className: \"myList\",\n        innerRef: provided.innerRef,\n        ref: provided.innerRef,\n        ...provided.draggableProps,\n        children: [list.map(({\n          id,\n          title,\n          thumb\n        }, index) => {\n          return /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: id,\n            index: index,\n            children: provided => /*#__PURE__*/_jsxDEV(Item, { ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              innerRef: provided.innerRef,\n              ref: provided.innerRef,\n              children: index + 1 + \". \" + title\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 45\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 38\n          }, this);\n        }), provided.placeholder]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_c = DraggableList;\nexport default DraggableList;\n\nvar _c;\n\n$RefreshReg$(_c, \"DraggableList\");","map":{"version":3,"sources":["/Users/micahpeterson/Desktop/P365ReactAdministration/src/components/DraggableList.js"],"names":["React","useState","DragDropContext","Droppable","Draggable","styled","DraggableList","props","array","id","title","thumb","TaskList","div","Item","onDragEnd","result","destination","source","draggableId","droppableId","index","items","Array","from","list","reorderedItem","splice","updateList","provided","innerRef","draggableProps","map","dragHandleProps","placeholder"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {DragDropContext, Droppable, Draggable} from \"react-beautiful-dnd\";\nimport './DraggableList.css';\n\nimport styled from 'styled-components';\n\nconst DraggableList = (props) => {\n\n\nlet array = [\n    {\n        id: 'list-1',\n        title: 'Automatic',\n        thumb: '/path/to/icon'\n    },\n    {\n        id: 'list-2',\n        title: 'Automatic',\n        thumb: '/path/to/icon'\n    },\n    {\n        id: 'list-3',\n        title: 'Automatic',\n        thumb: '/path/to/icon'\n    },\n    {\n        id: 'list-4',\n        title: 'Automatic',\n        thumb: '/path/to/icon'\n    }\n];\n\n\nconst TaskList = styled.div`\n    padding: 8px;\n`;\nconst Item = styled.div`\n    padding: 8px;\n    border: 1px solid gray;\n    margin:  2px;\n    background-color:white;\n`;\n\nlet onDragEnd = (result) => {\n\n    const {destination, source, draggableId} = result;\n\n    if(!destination){\n        return;\n    }\n\n    if(destination.droppableId === source.droppableId &&\n       destination.index === source.index\n    )\n    {\n        return;\n    }\n\n    const items = Array.from(list);\n    const [reorderedItem] = items.splice(source.index, 1);\n    items.splice(destination.index, 0, reorderedItem);\n\n    updateList(items);\n\n}\n\n\n  return (\n\n    <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"drop-id-1\">\n                {provided=>(\n\n\n                    <TaskList className=\"myList\" innerRef={provided.innerRef} ref={provided.innerRef} {...provided.draggableProps} >\n                            {list.map(({id, title, thumb}, index) => {\n                                return (\n                                     <Draggable draggableId={id} index={index}>\n                                        {provided=>(\n                                        \n                                            <Item \n                                                key={id} \n                                                {...provided.draggableProps}\n                                                {...provided.dragHandleProps}\n                                                innerRef={provided.innerRef}\n                                                ref={provided.innerRef}\n                                            >\n                                                {index+1 +\". \" + title}\n                                                \n                                            </Item>\n                                        \n                                        )}\n                                    </Draggable>\n                                );\n                            })}\n                            {provided.placeholder}\n                    </TaskList>\n\n                )}\n            </Droppable>\n    </DragDropContext>\n  )\n}\n\nexport default DraggableList;\n"]},"metadata":{},"sourceType":"module"}