{"ast":null,"code":"var _jsxFileName = \"/Users/micahpeterson/Desktop/P365ReactAdministration/src/components/DraggableList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport './DraggableList.css';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet array = [{\n  id: 'list-1',\n  title: 'Automatic',\n  thumb: '/path/to/icon'\n}, {\n  id: 'list-2',\n  title: 'Automatic',\n  thumb: '/path/to/icon'\n}, {\n  id: 'list-3',\n  title: 'Automatic',\n  thumb: '/path/to/icon'\n}, {\n  id: 'list-4',\n  title: 'Automatic',\n  thumb: '/path/to/icon'\n}];\n\nconst DraggableList = props => {\n  _s();\n\n  const TaskList = styled.div`\n        padding: 8px;\n    `;\n  const Item = styled.div`\n        padding: 8px;\n        border: 1px solid gray;\n        margin:  2px;\n        background-color:white;\n    `;\n  const [list, updateList] = useState(array);\n\n  let onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    console.log(list);\n    const items = Array.from(list);\n    const [reorderedItem] = items.splice(source.index, 1);\n    items.splice(destination.index, 0, reorderedItem);\n    console.log(items);\n    updateList(items);\n  };\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(Droppable, {\n      droppableId: \"drop-id-1\",\n      children: provided => /*#__PURE__*/_jsxDEV(TaskList, {\n        className: \"myList\",\n        ref: provided.innerRef,\n        ...provided.draggableProps,\n        children: [list.map(({\n          id,\n          title,\n          thumb\n        }, index) => {\n          return /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: id,\n            index: index,\n            children: provided => /*#__PURE__*/_jsxDEV(Item, { ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              ref: provided.innerRef,\n              children: index + 1 + \". \" + title\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 45\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 38\n          }, this);\n        }), provided.placeholder]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DraggableList, \"0JQdKTOxIAOrqbn9ZBVVn59nZZo=\");\n\n_c = DraggableList;\nexport default DraggableList;\n\nvar _c;\n\n$RefreshReg$(_c, \"DraggableList\");","map":{"version":3,"sources":["/Users/micahpeterson/Desktop/P365ReactAdministration/src/components/DraggableList.js"],"names":["React","useState","DragDropContext","Droppable","Draggable","styled","array","id","title","thumb","DraggableList","props","TaskList","div","Item","list","updateList","onDragEnd","result","destination","source","draggableId","droppableId","index","console","log","items","Array","from","reorderedItem","splice","provided","innerRef","draggableProps","map","dragHandleProps","placeholder"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {DragDropContext, Droppable, Draggable} from \"react-beautiful-dnd\";\nimport './DraggableList.css';\n\nimport styled from 'styled-components';\n\n\nlet array = [\n    {\n        id: 'list-1',\n        title: 'Automatic',\n        thumb: '/path/to/icon'\n    },\n    {\n        id: 'list-2',\n        title: 'Automatic',\n        thumb: '/path/to/icon'\n    },\n    {\n        id: 'list-3',\n        title: 'Automatic',\n        thumb: '/path/to/icon'\n    },\n    {\n        id: 'list-4',\n        title: 'Automatic',\n        thumb: '/path/to/icon'\n    }\n];\n\n\n\nconst DraggableList = (props) => {\n\n    const TaskList = styled.div`\n        padding: 8px;\n    `;\n    const Item = styled.div`\n        padding: 8px;\n        border: 1px solid gray;\n        margin:  2px;\n        background-color:white;\n    `;\n\n    const [list, updateList] = useState(array);\n\n\n\n    let onDragEnd = (result) => {\n\n        const {destination, source, draggableId} = result;\n\n        if(!destination){\n            return;\n        }\n\n        if(destination.droppableId === source.droppableId &&\n        destination.index === source.index\n        )\n        {\n            return;\n        }\n\n        console.log(list)\n        const items = Array.from(list);\n        const [reorderedItem] = items.splice(source.index, 1);\n        items.splice(destination.index, 0, reorderedItem);\n\n\n        console.log(items);\n        updateList(items);\n\n    }\n\n\n  return (\n\n    <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"drop-id-1\">\n\n                {provided=>(\n\n                    <TaskList className=\"myList\"  ref={provided.innerRef} {...provided.draggableProps} >\n                            {list.map(({id, title, thumb}, index) => {\n                                return (\n                                     <Draggable draggableId={id} index={index}>\n                                        {provided=>(\n                                        \n                                            <Item \n                                                key={id} \n                                                {...provided.draggableProps}\n                                                {...provided.dragHandleProps}\n                                                \n                                                ref={provided.innerRef}\n                                            >\n                                                {index+1 +\". \" + title}\n                                                \n                                            </Item>\n                                        \n                                        )}\n                                    </Draggable>\n                                );\n                            })}\n                            {provided.placeholder}\n                    </TaskList>\n\n                )}\n            </Droppable>\n    </DragDropContext>\n  )\n}\n\nexport default DraggableList;\n"]},"metadata":{},"sourceType":"module"}